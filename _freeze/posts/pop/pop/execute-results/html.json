{
  "hash": "093ae2ca8797f5b40a14c7f2484f4649",
  "result": {
    "markdown": "---\ntitle: \"Make it `pop`!\"\ndescription: \"Implementing stack behaviour in R\"\ndate: \"2024-3-12\"\ncategories: [R]\nimage: pop.png\ntoc: true\ntoc-depth: 4\n---\n\n\nFunctions like `pop` exists in many languages for iterable item, such as lists or arrays.\nWhile particulars change, in general `pop` removes an item from a container and return said item.\nThis is typical for data structures called `queue`, `stack`, and `deque`, which beside `pop` implement functions for adding elements to this container and differ in whether they are first in first out (queue), first in last out (stack), or both ways (deque).\n\nWhile not common to R, these data structures are very convenient when you are consuming elements of an array, especially if the number of consumed elements can differ each iteration.\nFor instance, you can consume command-line arguments when each parameter can have different number of arguments.\n\nSee following snippet.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# Main argument parsing loop using pop\n# currently only 0 (flags) and 1 parameter arguments are supported\n    while(length(args) > 0){\n        arg = pop(args)\n        id = match(arg, options$long)\n\n        if(is.na(id)){\n            positional = c(positional, arg)\n            next\n            }\n\n        if(options$flag[[id]]){\n            pars[id] = TRUE\n            next\n            }\n\n        if(length(args) < 1 || args[1] %in% options$long)\n            stop(\"Not enough arguments for \", arg, call. = FALSE)\n\n        pars[id] = pop(args)\n        }\n```\n:::\n\n\nI could surely implement this by incrementing index `i` and it wouldn't be much difficult.\nBut this makes the code a bit cleaner.\n\n## Helper functions\n\nSince we will be doing some memory inspections, we will define two helper functions.\n\n`inspect` is simple mapping of the internal `inspect` function to a visible namespace.\nIt will print the internal structure of an object.\nThink about it as a very complex `str`.\n\n`address` is a simple `C` function compiled using the great `inline` package to simply return address of an object. This function is copied from `data.table`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninspect = function(x) .Internal(inspect(x))\naddress = inline::cfunction(signature(x = \"SEXP\"),\n    body = \"\n    char buffer[32];\n    snprintf(buffer, 32, \\\"%p\\\", (void *)x);\n    return(mkString(buffer));\n    \",\n    language = \"C\",\n    )\n```\n:::\n\n\n## Definition\n\nLet `pop(x, n)` be a function that returns `n` first elements of `x` and at the same time removes `n` elements from `x`.\n\nFor instance:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec = c(5, 3, 2, 10, 5)\npop(vec, 2) # [1] 5 3\nvec # [1] 2 10 5\n```\n:::\n\n\n## Usign `assign`\n\nWhen doing modification of a state, the first thing that might come to your mind is the `<<-` operator.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npop = function(x){\n    val = x[1]\n    x <<- x[-1]\n    val\n    }\n\nvec = c(5, 3, 8)\npop(vec)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n\n```{.r .cell-code}\nvec\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5 3 8\n```\n:::\n\n```{.r .cell-code}\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3 8\n```\n:::\n:::\n\n\nBut that won't work, since you are modifying the variable `x` instead of the one passed to the `pop` function.\nYou need to find the name of that variable and assign the modified vector to it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npop = function(x, n = 1){\n    ns = seq_len(min(n, length(x)))\n    val = x[ns]\n    obj = x[-ns]\n    assign(deparse(substitute(x)), obj, envir=parent.frame())\n    val\n    }\n\nvec = c(5, 3, 8)\npop(vec)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n\n```{.r .cell-code}\nvec\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3 8\n```\n:::\n:::\n\n\nThere are few potential issues here. First of all we are assigning the value into the `parent.frame()` of the `pop` function, which won't work if the `pop` is being called inside function, but that is a risk I am willing to take and a version that I ended up using.\n\nThe second issue is that we are re-allocating the vector during each call `pop`.\nWhen we are doing only a few operatios with short vectors, this is fine.\nBut this can be an interesting challenge.\n\nHowever, one of the big advantages of this approach is how easy it is, and that object we are working with, a vector, is just an R vector.\nWe don't need to define any particular new behaviour to work with it.\n\n## Function factory\n\nAnother way to do this might be to create a function factory that works as an iterator:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_pop = function(x){\n    i = 1\n    x = x\n\n    function(n = 1){\n        if(i > length(x))\n            return(NULL)\n\n        ns = seq_len(min(n, length(x) - i + 1))\n        val = x[ns + i - 1]\n        i <<- i + n\n\n        cat(\"Address of 'x' is: \", address(x), \"\\n\")\n        val\n        }\n    }\n\nvec = c(5, 3, 8)\naddress(vec)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"0x55b6d5aa3bc8\"\n```\n:::\n\n```{.r .cell-code}\npop = new_pop(vec)\npop()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAddress of 'x' is:  0x55b6d5aa3bc8 \n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n\n```{.r .cell-code}\npop(2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAddress of 'x' is:  0x55b6d5aa3bc8 \n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3 8\n```\n:::\n\n```{.r .cell-code}\npop()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNULL\n```\n:::\n:::\n\n\nNotice that the address of the vector didn't change!\nSince there is no internal modification, R will never have to create a copy.\nAll we are changing is the iterating variable `i`.\n\nLike the previous example, this is a really simple to do and we do not need to define any additional functions and methods.\n\nThe disadvantage is that we don't know the number of remaining elements, and we can't look ahead.\nBut surely, these are solvable problems with some parametrization or just \n\n## Environments\n\nThe function factory worked because the `i` and `x` were stored in an enclosing environment of the returned function.\n\nWe can do something like that explicitly since environments are the only objects in R where pass-by-reference works.\nThis is how `RC` and `R6` are defined and we are essentially building classes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_stack = function(x){\n    env = new.env(parent = emptyenv(), size = 2)\n    env$x = x\n    env$i = 1 \n    env\n    }\n\npop = function(obj, n = 1){\n    if(obj$i > length(obj$x))\n        return(NULL)\n\n    ns = seq_len(min(n, length(obj$x) - obj$i + 1))\n    val = obj$x[ns + obj$i - 1]\n    obj$i = obj$i + n\n\n    cat(\"Address of 'obj$x' is: \", address(obj$x), \"\\n\")\n    val\n    }\n\nvec = c(5, 3, 8)\naddress(vec)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"0x55b6d37f94a8\"\n```\n:::\n\n```{.r .cell-code}\nstack = new_stack(vec)\naddress(stack)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"0x55b6d5870ba0\"\n```\n:::\n\n```{.r .cell-code}\npop(stack)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAddress of 'obj$x' is:  0x55b6d37f94a8 \n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n\n```{.r .cell-code}\npop(stack, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAddress of 'obj$x' is:  0x55b6d37f94a8 \n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3 8\n```\n:::\n\n```{.r .cell-code}\npop(stack)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNULL\n```\n:::\n:::\n\n\nThe address of the `stack` or the internal vector `stack$obj` doesn't change.\n\n## RC class\n\nFrom this, it is only a small step towards fully fledged classes.\nAs mentioned before, we have `RC` classes and `R6` classes that implements classical OOP seamantics using environments.\nGenerally `R6` classes are preferred as they are more performant, but require dependency (the `R6` package). `RC` classes are very similar and included in base R.\nSo let's try to use them.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nStack = setRefClass(\"Stack\",\n    fields = list(\n        items = \"vector\",\n        index = \"integer\"\n        ),\n\n    methods = list(\n        initialize = function(x){\n            items <<- x\n            index <<- 1L\n            },\n        pop = function(n = 1){\n            if(index > length(items))\n                return(NULL)\n\n            ns = seq_len(min(n, length(items) - index + 1))\n            val = items[ns + index - 1]\n            index <<- index + as.integer(n)\n\n            val\n            },\n\n        peek = function(n = 1){\n            if(index > length(items))\n                return(NULL)\n\n            ns = seq_len(min(n, length(items) - index + 1))\n            items[ns]\n            },\n\n        size = function(){\n            length(items) - index + 1\n            }\n        )\n    )\n\nvec = c(5, 3, 8)\nstack = Stack(vec)\nstack$pop()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n\n```{.r .cell-code}\nstack$pop(2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3 8\n```\n:::\n\n```{.r .cell-code}\nstack$pop()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNULL\n```\n:::\n:::\n\n\n## Bare environment\n\n`RC` classes are quite hungry and you should generally use `R6` classes instead (see [RC vs R6 performance](https://r6.r-lib.org/articles/Performance.html)).\n\nThere is however an interestring trick in the above article.\nBare environments.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_stack = function(x){\n    i = 1\n\n    pop = function(n = 1){\n        if(i > length(x))\n            return(NULL)\n\n        ns = seq_len(min(n, length(x) - i + 1))\n        val = x[ns + i - 1]\n        i <<- i + n\n\n        val\n        }\n\n    peek = function(n = 1){\n        if(i > length(x))\n            return(NULL)\n\n        ns = seq_len(min(n, length(x) - i + 1))\n        x[ns]\n        }\n\n    size = function(){\n        length(x) - i + 1\n        }\n\n    structure(environment(), class = \"Stack\")\n    }\n\nvec = c(5, 3, 8)\nstack = new_stack(vec)\nstack$pop()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n\n```{.r .cell-code}\nstack$peek()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n\n```{.r .cell-code}\nstack$size()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n\n```{.r .cell-code}\nstack$pop(2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3 8\n```\n:::\n:::\n\n\nYou got most of the power of `R6` classes for free right there in the base R!\nAnd they are much easier to work with than `RC` classes and much more performant.\n\n## Attributes\n\nAll R objects have attributes.\nIn the above example, set `class` attribute of an object generated by `new_stack`.\n\nCan we set class attribute without modification of the whole object?\n\n\n::: {.cell}\n\n```{.r .cell-code}\npop = function(x, n = 1){\n    if(is.null(attr(x, \"index\")))\n        attr(x, \"index\") = 1\n\n        i = attr(x, \"index\")\n\n        if(i > length(x))\n            return(NULL)\n\n        ns = seq_len(min(n, length(x) - i + 1))\n        val = x[ns + i - 1]\n        attr(x, \"index\") = i + n\n\n        val\n    }\n\nvec = c(5, 3, 8)\npop(vec)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n\n```{.r .cell-code}\npop(vec, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5 3\n```\n:::\n:::\n\n\nUnfortunatelly, this doesn't work since setting attribute is modification of an object.\nWe would have to use `.Call` interface and modify it in `C` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset_index = inline::cfunction(\n    signature(x = \"SEXP\", index = \"SEXP\"),\n    body = \"duplicate(x); setAttrib(x, install(\\\"index\\\"), index); return x;\",\n    language = \"C\"\n    )\n\npop = function(x, n = 1){\n    if(is.null(attr(x, \"index\")))\n        set_index(x, 1)\n\n        i = attr(x, \"index\")\n\n        if(i > length(x))\n            return(NULL)\n\n        ns = seq_len(min(n, length(x) - i + 1))\n        val = x[ns + i - 1]\n        set_index(x, i + n)\n        cat(\"Address of 'x' is: \", address(x), \"\\n\")\n\n        val\n    }\n\nvec = c(5, 3, 8)\naddress(vec)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"0x55b6d3eb6e78\"\n```\n:::\n\n```{.r .cell-code}\npop(vec)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAddress of 'x' is:  0x55b6d3eb6e78 \n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n\n```{.r .cell-code}\npop(vec, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAddress of 'x' is:  0x55b6d3eb6e78 \n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3 8\n```\n:::\n:::\n\n\nWith some `C` level magic, everything is possible!\nAddress is the same, meaning that we are only modifying the attribute of a vector, but not the vector itself.\nTo get the size or peek of the current stack, we would need to create a new functions that calculate the attribute.\nBut since these functions do not need to do any in-place modification, it will not be a lot of work.\n\n## Summary\n\nIn this small post we have investigated how to make simple `pop` function that simulate \"consumption\" of elements from a vector.\nIncluding memory-efficient methods providing modify-in-place seamantics.\n\nIf we wanted to implement full stack, queue, and deque with the `put` or `insert` functions that would add elements to the vector, the situation would be quite different and different solutions might be better.\nBut since I didn't need this functionality, I could afford to implement these easy solutions.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}